//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/scrip/GameInput/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""Game"",
            ""id"": ""83744acb-966a-47a9-86be-136edae5aeef"",
            ""actions"": [
                {
                    ""name"": ""FloaterDepthUp"",
                    ""type"": ""Button"",
                    ""id"": ""d6ad2b9e-566b-4490-a8f9-e9f2396a4b7e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FloaterDepthDown"",
                    ""type"": ""Button"",
                    ""id"": ""e7e97bfe-768d-4c24-ad16-9c0fda432f28"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Winding"",
                    ""type"": ""Button"",
                    ""id"": ""74a0a65e-c9b8-4d31-bc6f-c613e3522571"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cast"",
                    ""type"": ""Button"",
                    ""id"": ""733a3079-9b85-4937-8a45-95053f81bbae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hooking"",
                    ""type"": ""Button"",
                    ""id"": ""9a5c2b53-d2d3-4968-a742-26bd12914d12"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Looking"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e52ed570-754c-4afd-97c3-f9a64de22c5c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d52f2269-ae99-4b79-a741-82bdd273c68f"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""FloaterDepthUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fa486992-512f-4044-96a8-924968757310"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FloaterDepthDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""698d45aa-66b1-4a7f-b7c2-b9c450691d47"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Winding"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6c0e85c2-6202-44dc-bd77-573b430d1d0b"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hooking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7c96b20e-ea52-48f1-bb22-f054200b829c"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Looking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c7ceeef1-1a27-4cec-82e8-24169106c5f0"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cast"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Game
        m_Game = asset.FindActionMap("Game", throwIfNotFound: true);
        m_Game_FloaterDepthUp = m_Game.FindAction("FloaterDepthUp", throwIfNotFound: true);
        m_Game_FloaterDepthDown = m_Game.FindAction("FloaterDepthDown", throwIfNotFound: true);
        m_Game_Winding = m_Game.FindAction("Winding", throwIfNotFound: true);
        m_Game_Cast = m_Game.FindAction("Cast", throwIfNotFound: true);
        m_Game_Hooking = m_Game.FindAction("Hooking", throwIfNotFound: true);
        m_Game_Looking = m_Game.FindAction("Looking", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Game
    private readonly InputActionMap m_Game;
    private List<IGameActions> m_GameActionsCallbackInterfaces = new List<IGameActions>();
    private readonly InputAction m_Game_FloaterDepthUp;
    private readonly InputAction m_Game_FloaterDepthDown;
    private readonly InputAction m_Game_Winding;
    private readonly InputAction m_Game_Cast;
    private readonly InputAction m_Game_Hooking;
    private readonly InputAction m_Game_Looking;
    public struct GameActions
    {
        private @GameInput m_Wrapper;
        public GameActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @FloaterDepthUp => m_Wrapper.m_Game_FloaterDepthUp;
        public InputAction @FloaterDepthDown => m_Wrapper.m_Game_FloaterDepthDown;
        public InputAction @Winding => m_Wrapper.m_Game_Winding;
        public InputAction @Cast => m_Wrapper.m_Game_Cast;
        public InputAction @Hooking => m_Wrapper.m_Game_Hooking;
        public InputAction @Looking => m_Wrapper.m_Game_Looking;
        public InputActionMap Get() { return m_Wrapper.m_Game; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameActions set) { return set.Get(); }
        public void AddCallbacks(IGameActions instance)
        {
            if (instance == null || m_Wrapper.m_GameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameActionsCallbackInterfaces.Add(instance);
            @FloaterDepthUp.started += instance.OnFloaterDepthUp;
            @FloaterDepthUp.performed += instance.OnFloaterDepthUp;
            @FloaterDepthUp.canceled += instance.OnFloaterDepthUp;
            @FloaterDepthDown.started += instance.OnFloaterDepthDown;
            @FloaterDepthDown.performed += instance.OnFloaterDepthDown;
            @FloaterDepthDown.canceled += instance.OnFloaterDepthDown;
            @Winding.started += instance.OnWinding;
            @Winding.performed += instance.OnWinding;
            @Winding.canceled += instance.OnWinding;
            @Cast.started += instance.OnCast;
            @Cast.performed += instance.OnCast;
            @Cast.canceled += instance.OnCast;
            @Hooking.started += instance.OnHooking;
            @Hooking.performed += instance.OnHooking;
            @Hooking.canceled += instance.OnHooking;
            @Looking.started += instance.OnLooking;
            @Looking.performed += instance.OnLooking;
            @Looking.canceled += instance.OnLooking;
        }

        private void UnregisterCallbacks(IGameActions instance)
        {
            @FloaterDepthUp.started -= instance.OnFloaterDepthUp;
            @FloaterDepthUp.performed -= instance.OnFloaterDepthUp;
            @FloaterDepthUp.canceled -= instance.OnFloaterDepthUp;
            @FloaterDepthDown.started -= instance.OnFloaterDepthDown;
            @FloaterDepthDown.performed -= instance.OnFloaterDepthDown;
            @FloaterDepthDown.canceled -= instance.OnFloaterDepthDown;
            @Winding.started -= instance.OnWinding;
            @Winding.performed -= instance.OnWinding;
            @Winding.canceled -= instance.OnWinding;
            @Cast.started -= instance.OnCast;
            @Cast.performed -= instance.OnCast;
            @Cast.canceled -= instance.OnCast;
            @Hooking.started -= instance.OnHooking;
            @Hooking.performed -= instance.OnHooking;
            @Hooking.canceled -= instance.OnHooking;
            @Looking.started -= instance.OnLooking;
            @Looking.performed -= instance.OnLooking;
            @Looking.canceled -= instance.OnLooking;
        }

        public void RemoveCallbacks(IGameActions instance)
        {
            if (m_Wrapper.m_GameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameActions instance)
        {
            foreach (var item in m_Wrapper.m_GameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameActions @Game => new GameActions(this);
    private int m_PCSchemeIndex = -1;
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    public interface IGameActions
    {
        void OnFloaterDepthUp(InputAction.CallbackContext context);
        void OnFloaterDepthDown(InputAction.CallbackContext context);
        void OnWinding(InputAction.CallbackContext context);
        void OnCast(InputAction.CallbackContext context);
        void OnHooking(InputAction.CallbackContext context);
        void OnLooking(InputAction.CallbackContext context);
    }
}
